{"version":3,"file":"conform-object-literal.spec.js","sourceRoot":"","sources":["conform-object-literal.spec.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA6CE","sourcesContent":["/*import { expect } from \"chai\";\nimport * as esprima from 'esprima'\nimport { Class } from '../../name_extracting/Rules/Class'\nimport { Identifier, IdentifierType } from \"../../name_extracting/Identifier\";\nimport { ObjectLiteral } from \"../../name_extracting/Rules/ObjectLiteral\";\ndescribe(\"recognize object literal es5,es6\", () => {\n    describe('#extract', () => {\n        it('extracts an object literal identifier from OL declaration', () => {\n            ['obj = {}'].forEach(declaration => {\n                const identifyer = new ObjectLiteral(createNode(declaration)).extract()\n                expect(identifyer[0]).to.have.property('name', 'obj')\n                expect(identifyer[0]).to.be.instanceOf(Identifier)\n                expect(identifyer[0]).to.have.property('type', IdentifierType.Object_Literal)\n            })\n        })\n        it('extracts an object literal with arrow function', () => {\n            [`let obj = {\n                func:()=>{}\n                }`,\n                `var obj = {\n                func: () => {\n                }\n              }`].forEach(declaration => {\n                    const identifyer = new ObjectLiteral(createNode(declaration)).extract()\n                    expect(identifyer[0]).to.have.property('name', 'func')\n                    expect(identifyer[0]).to.be.instanceOf(Identifier)\n                    expect(identifyer[0]).to.have.property('type', IdentifierType.ArrowFunction)\n                    expect(identifyer[1]).to.have.property('name', 'obj')\n                    expect(identifyer[1]).to.be.instanceOf(Identifier)\n                    expect(identifyer[1]).to.have.property('type', IdentifierType.Object_Literal)\n                })\n        })\n        it('does not extracts a OL from a node that do not contains a OL identifyer', () => {\n            ['person.name = function () {}', 'firstName: \"moshe\"'].forEach(declaration => {\n                const identifyer = new ObjectLiteral(createNode(declaration)).extract()\n                expect(identifyer).to.be.false\n            })\n        })\n\n    })\n})\n\nfunction createNode(expression) {\n    return esprima.parseScript(expression).body.pop()\n}\n*/"]}