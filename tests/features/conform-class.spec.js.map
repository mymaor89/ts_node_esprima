{"version":3,"file":"conform-class.spec.js","sourceRoot":"","sources":["conform-class.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { expect } from \"chai\";\nimport * as esprima from 'esprima'\nimport { Class } from '../../source/name_extraction/Rules/Class'\nimport { Identifier, IdentifierType } from \"../../source/name_extraction/Identifier\";\ndescribe(\"recognize class\", () => {\n    describe('#extract', () => {\n        it('extracts a class from a class declaration', () => {\n            ['class User {}'].forEach(declaration => {\n                const identifyer = new Class(createNode(declaration)).extract()\n                expect(identifyer).to.have.property('name', 'User')\n                expect(identifyer).to.be.instanceOf(Identifier)\n                expect(identifyer).to.have.property('type', IdentifierType.Class)\n            })\n        })\n        it('extracts a class and method from a class declaration', () => {\n            ['class User {sayHi(param1) {}}'].forEach(declaration => {\n                const identifyer = new Class(createNode(declaration)).extract()\n                expect(identifyer[0]).to.have.property('name', 'param1')\n                expect(identifyer[0]).to.be.instanceOf(Identifier)\n                expect(identifyer[0]).to.have.property('type', IdentifierType.Parameter)\n                expect(identifyer[1]).to.have.property('name', 'sayHi')\n                expect(identifyer[1]).to.be.instanceOf(Identifier)\n                expect(identifyer[1]).to.have.property('type', IdentifierType.Method)\n                expect(identifyer[2]).to.have.property('name', 'User')\n                expect(identifyer[2]).to.be.instanceOf(Identifier)\n                expect(identifyer[2]).to.have.property('type', IdentifierType.Class)\n\n            })\n        })\n        it('extracts a class with constructor,property and method with param', () => {\n            ['class User {constructor(name) { this._name = name;}sayHi(param1) {}}'].forEach(declaration => {\n                const identifyer = new Class(createNode(declaration)).extract()\n                expect(identifyer[0]).to.have.property('name', 'name')\n                expect(identifyer[0]).to.be.instanceOf(Identifier)\n                expect(identifyer[0]).to.have.property('type', IdentifierType.Parameter)\n                expect(identifyer[1]).to.have.property('name', '_name')\n                expect(identifyer[1]).to.be.instanceOf(Identifier)\n                expect(identifyer[1]).to.have.property('type', IdentifierType.Property)\n                expect(identifyer[2]).to.have.property('name', 'param1')\n                expect(identifyer[2]).to.be.instanceOf(Identifier)\n                expect(identifyer[2]).to.have.property('type', IdentifierType.Parameter)\n                expect(identifyer[3]).to.have.property('name', 'sayHi')\n                expect(identifyer[3]).to.be.instanceOf(Identifier)\n                expect(identifyer[3]).to.have.property('type', IdentifierType.Method)\n                expect(identifyer[4]).to.have.property('name', 'User')\n                expect(identifyer[4]).to.be.instanceOf(Identifier)\n                expect(identifyer[4]).to.have.property('type', IdentifierType.Class)\n            })\n        })\n        it('does not extracts a class from a node that do not contains a class identifyer', () => {\n            ['person.name = function () {}', 'firstName: \"moshe\"'].forEach(declaration => {\n                const identifyer = new Class(createNode(declaration)).extract()\n                expect(identifyer).to.be.false\n            })\n        })\n\n    })\n})\n\nfunction createNode(expression) {\n    return esprima.parseScript(expression).body.pop()\n}\n"]}