{"version":3,"file":"conform-MethodExpression.spec.js","sourceRoot":"","sources":["conform-MethodExpression.spec.ts"],"names":[],"mappings":";;AAAA,6BAA8B;AAC9B,iCAAkC;AAClC,iFAA+E;AAC/E,sEAAqF;AACrF,QAAQ,CAAC,6BAA6B,EAAE;IACpC,QAAQ,CAAC,UAAU,EAAE;QACjB,EAAE,CAAC,4CAA4C,EAAE;YAC7C,CAAC,qCAAqC,CAAC;iBAClC,OAAO,CAAC,UAAA,WAAW;gBAChB,IAAM,UAAU,GAAG,IAAI,mCAAgB,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC,OAAO,EAAE,CAAA;gBAC1E,aAAM,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,YAAY,CAAC,CAAA;gBACzD,aAAM,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,UAAU,CAAC,uBAAU,CAAC,CAAA;gBAC/C,aAAM,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,2BAAc,CAAC,MAAM,CAAC,CAAA;YACtE,CAAC,CAAC,CAAA;QACV,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,sEAAsE,EAAE;YACvE,CAAC,KAAK,EAAE,oBAAoB,CAAC,CAAC,OAAO,CAAC,UAAA,WAAW;gBAC7C,IAAM,UAAU,GAAG,IAAI,mCAAgB,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC,OAAO,EAAE,CAAA;gBAC1E,aAAM,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,KAAK,CAAA;YAClC,CAAC,CAAC,CAAA;QACN,CAAC,CAAC,CAAA;IAEN,CAAC,CAAC,CAAA;AACN,CAAC,CAAC,CAAA;AAEF,SAAS,UAAU,CAAC,UAAU;IAC1B,OAAO,OAAO,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,CAAA;AACrD,CAAC","sourcesContent":["import { expect } from \"chai\";\nimport * as esprima from 'esprima'\nimport { MethodExpression } from '../../name_extracting/Rules/MethodExpression'\nimport { Identifier, IdentifierType } from \"../../source/name_extraction/Identifier\";\ndescribe(\"recognize Method expression\", () => {\n    describe('#extract', () => {\n        it('extracts a method from a method expression', () => {\n            [' myObject.somemethod = function(){}']\n                .forEach(declaration => {\n                    const identifyer = new MethodExpression(createNode(declaration)).extract()\n                    expect(identifyer).to.have.property('name', 'somemethod')\n                    expect(identifyer).to.be.instanceOf(Identifier)\n                    expect(identifyer).to.have.property('type', IdentifierType.Method)\n                })\n        })\n\n        it('does not extracts a method from a node that do not contains a method', () => {\n            ['x=4', 'firstName: \"moshe\"'].forEach(declaration => {\n                const identifyer = new MethodExpression(createNode(declaration)).extract()\n                expect(identifyer).to.be.false\n            })\n        })\n\n    })\n})\n\nfunction createNode(expression) {\n    return esprima.parseScript(expression).body.pop()\n}\n"]}