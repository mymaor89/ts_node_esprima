{"version":3,"file":"PropertySemicolon.js","sourceRoot":"","sources":["../../../source/name_extraction/Rules/PropertySemicolon.ts"],"names":[],"mappings":"AAAC;;;;;;;;;;;;;;;;;;;;;;;;;;EA0BC","sourcesContent":[" /*import { Rules } from './Rules'\nimport { Identifier, IdentifierType } from '../Identifier';\nexport class PropertySemicolon extends Rules {\n\n   private static isfuncOrArrowfunc(element :any) :boolean {\n        return element === 'FunctionExpression' || element === 'ArrowFunctionExpression'\n    }\n\n    handle(): Identifier | Identifier[] {\n        if (!PropertySemicolon.isfuncOrArrowfunc(this.node.value)) {\n            if (this.node.key.hasOwnProperty('name')) {\n                return new Identifier(this.node.key.name, IdentifierType.Property);\n            }\n            else if (this.node.key.hasOwnProperty('raw')) {\n                return new Identifier(String(this.node.key.raw).replace(/'/g, ''), IdentifierType.Property);\n            }\n        }S\n    }\n\n    conforms(): boolean {\n        // to catch :  firstName: \"John\"\n        return this.node.type === 'Property'\n    }\n    \n\n}\n*/"]}