{"version":3,"file":"MethodExpression.js","sourceRoot":"","sources":["../../../source/name_extraction/Rules/MethodExpression.ts"],"names":[],"mappings":";;AAAA,mCAA+B;AAC/B,8CAA2C;AAI3C,MAAa,gBAAiB,SAAQ,aAAK;IAC7B,QAAQ;QAEd;;;;;;UAME;QAEF,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,KAAK,qBAAqB;eACxC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,KAAK,sBAAsB;eACpD,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,KAAK,kBAAkB;eACrD,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,KAAK,oBAAoB,CAAA;IAEnE,CAAC;IAGD,MAAM;QACF,IAAI,UAAU,GAAwB,CAAE,IAAI,CAAC,IAA4B,CAAC,UAAU,CAAyB,CAAC;QAC9G,OAAO,uBAAU,CAAC,UAAU,CAAE,UAAU,CAAC,IAAqC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAA;IACjG,CAAC;CAEJ;AAxBD,4CAwBC","sourcesContent":["import { Rules } from './Rules'\nimport { Identifier } from '../Identifier';\nimport { ExpressionStatement, AssignmentExpression } from 'estree';\nimport { MemberExpression } from '@babel/types';\n\nexport class MethodExpression extends Rules {\n    protected conforms(): boolean {\n\n        /*\n        X= {}\n        X.someMethod= function(){\n             console.log('someMethod')\n        }\n        X.someMethod()\n        */\n        \n        return this.node.type === 'ExpressionStatement'\n            && this.node.expression.type === 'AssignmentExpression'\n            && this.node.expression.left.type === 'MemberExpression'\n            && this.node.expression.right.type === 'FunctionExpression'\n\n    }\n\n\n    handle(): Identifier | Identifier[] {\n        let assignment : AssignmentExpression=((this.node as ExpressionStatement).expression) as AssignmentExpression;\n        return Identifier.fromMethod((assignment.left as unknown  as MemberExpression).property.name)\n    }\n\n}\n"]}